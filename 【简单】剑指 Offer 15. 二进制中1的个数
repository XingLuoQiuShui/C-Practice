编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。

提示：

    请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
    在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

示例 1：

输入：n = 11 (控制台输入 00000000000000000000000000001011)
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

原题解：
class Solution {
public:
    int hammingWeight(uint32_t n) 
    {
        int count=0;
        unsigned int time = 32;
        unsigned int m = n;
        for(; m >= 1; m >> 1)   //这里的m不能实现位数逐渐缩短的右移，而是不断滚动或补零——>计算量非常大，造成内存溢出
        {
            if( m % unsigned int(time--) != 0)    //试图转化为无符号整型，但是无用
            {
                count=count+1;
            }
        }
        return count;
    }
};


最终解答：
class Solution {
public:
    int hammingWeight(uint32_t n) 
    {
        int count=0;
        while(n >= 1)
        {
            if(n%2 != 0)    //每次只关注最右边的一位是否为1
            {
                count=count+1;
            }
            n = n>>1;       //从最右一位开始，向左判断
        }
        return count;
    }
};

同样算1的个数的解法还有：
public int hammingWeight(int n) {
        String s = Integer.toBinaryString(n);
        int count = 0;
        for (int i = 0; i < s.length(); i++){
            if (s.charAt(i) == '1')
                count++;
        }
        return count;
}
